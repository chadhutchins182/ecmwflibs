# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Deploy Universal

on:
  workflow_dispatch: {}

  repository_dispatch:
    types: [ecmwflibs-windows-uploaded]

  # workflow_run:
  #   workflows: ["Build Windows"]
  #   branches: [main]
  #   types: [completed]


jobs:

  # First check that the wheels are properly pushed to PiPy so
  # no one gets the universal version by accident, because
  # it is pushed first
  checks:
    runs-on: ${{ matrix.os }}
    name: "Check ${{ matrix.os }}"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install packages
        run: |
          pip install black pytest flake8 isort setuptools

      - name: Code QA
        run: |
          black --version
          isort --check --profile=black .
          black --check .
          flake8 .

      - run: |
          python -m pip install --upgrade pip
          version=$(python ./setup.py --version)
          mv ecmwflibs ecmwflibs.no
          rm -fr dist *.egg*
          ls -l
          pip install ecmwflibs==$version

      - shell: python
        run: |
          import ecmwflibs
          print(ecmwflibs.__file__)
          assert not ecmwflibs.universal()


  deploy:

    runs-on: ubuntu-latest
    needs: checks

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    # - name: Check version
    #   run: |
    #     release=${GITHUB_REF##*/}
    #     version=$(python setup.py --version)
    #     test "$release" == "$version"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
    - name: Build and publish

      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py bdist_wheel --universal
        twine upload dist/*
